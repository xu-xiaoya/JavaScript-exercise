1、-moz-代表firefox浏览器私有属性

2、-ms-代表ie浏览器私有属性

3、-webkit-代表safari、chrome私有属性

4、-o-代表Opera

第三章  CSS样式表基础

1、CSS语法：
选择器 { 属性名: 属性值; 属性名: 属性值; }
如：
p { color: red; font-size: 24pt; }
在这个例子中，p 是选择器，color 和 font-size 是属性，red 和 24pt 是值。

2、创建 CSS
插入样式表的方法有三种：

外部样式表
    当样式需要应用于很多页面时，外部样式表将是理想的选择。在使用外部样式表的情况下，你可以通过改变一个文件来改变整个站点的外观。每个页面使用 <link> 标签链接到样式表。<link> 标签在（文档的）头部：
如：
<head>
<link rel="stylesheet" type="text/css" href="mystyle.css" />
</head>
浏览器会从文件 mystyle.css 中读到样式声明，并根据它来格式文档

内部样式表
    当单个文档需要特殊的样式时，就应该使用内部样式表。你可以使用 <style> 标签在文档头部定义内部样式表
如：
<head>
<style>
  body { background: #ccf; }
</style>
</head>

内联样式
    要使用内联样式，你需要在相关的标签内使用样式（style）属性。Style 属性可以包含任何 CSS 属性。
如：
<p style="color: red; font-size: 36pt">
这是一个段落
</p>

3、CSS 字体
CSS 字体属性定义文本的字体系列、大小、加粗、风格（如斜体）和变形（如小型大写字母）。

CSS 字体属性
font	简写属性。作用是把所有针对字体的属性设置在一个声明中。
font-family	设置字体系列。
font-size	设置字体的尺寸。
font-style	设置字体风格。
font-weight	设置字体的粗细。

1) font-family 属性 定义文本的字体系列。

CSS 定义了 5 种通用字体系列：
Serif 字体
Sans-serif 字体
Monospace 字体
Cursive 字体
Fantasy 字体

如果你希望文档使用一种 sans-serif 字体，但是你并不关心是哪一种字体，以下就是一个合适的声明：
body {font-family: sans-serif;}

可以为给定的元素指定一系列的字体，如
font-family: 隶书, 华文行楷;

2) font-style 属性最常用于规定斜体文本。
该属性有三个值：
normal - 文本正常显示
italic - 文本斜体显示
oblique - 文本倾斜显示
斜体（italic）是一种简单的字体风格，对每个字母的结构有一些小改动，来反映变化的外观。与此不同，倾斜（oblique）文本则是正常竖直文本的一个倾斜版本。
通常情况下，italic 和 oblique 文本在 web 浏览器中看上去完全一样。

3) font-weight 属性设置文本的粗细。
使用 bold 关键字可以将文本设置为粗体。
如：font-weight: bold;

4) font-size 属性设置文本的大小。
font-size 值可以是绝对或相对值。
font-size: 36pt;

例
<html>
<head>
<meta charset = "utf-8">
<title>CSS</title>
<style>
p {
  color: red;
  font-size: 36pt;
  font-family: 隶书, 华文行楷;
  font-style: italic;
  font-weight: bold;
}
</style>
</head>
<body>
<p>网页设计 第三章 CSS样式表基础</p>
</body>
</html>

font 简写属性在一个声明中设置所有字体属性。
可以按顺序设置如下属性：
font-style
font-weight
font-size/line-height
font-family
如：font: italic bold 36pt/40pt 黑体


4、CSS 文本
CSS 文本属性可定义文本的外观。
通过文本属性，您可以改变文本的颜色、字符间距，对齐文本，装饰文本，对文本进行缩进，等等。

CSS 文本属性
color	设置文本颜色
direction	设置文本方向。
line-height	设置行高（行间距）。
letter-spacing	设置字符间距。
text-align	规定文本的水平对齐方式。
text-decoration	规定添加到文本的装饰效果。
text-indent	规定文本块首行的缩进。
text-shadow	设置文本阴影。
text-transform	控制元素中的字母。
white-space	设置元素中空白的处理方式。
word-spacing	设置字间距。

1) text-indent 属性，缩进文本
通过使用 text-indent 属性，所有元素的第一行都可以缩进一个给定的长度，甚至该长度可以是负值。
这个属性最常见的用途是将段落的首行缩进
如：text-indent: 2em;

2) text-align 属性，水平对齐
值 left、right 和 center 会导致元素中的文本分别左对齐、右对齐和居中。justify是两端对齐。
如：text-align: center;

3) word-spacing 属性，字间隔
word-spacing 属性可以改变字（单词）之间的标准间隔。
word-spacing 属性接受一个正长度值或负长度值。如果提供一个正长度值，那么字之间的间隔就会增加。为 word-spacing 设置一个负值，会把它拉近：

4) letter-spacing 属性，字母间隔
letter-spacing 属性与 word-spacing 的区别在于，字母间隔修改的是字符或字母之间的间隔。

5) text-decoration 属性，文本装饰
text-decoration 有 5 个值：
none 无
underline 下划线
overline 上划线
line-through 删除线
blink 文本闪烁

6) white-space 属性，处理空白符
white-space 属性会影响到用户代理对源文档中的空格、换行和 tab 字符的处理。
white-space 属性有如下几个值
    normal  默认。空白会被浏览器忽略。
    pre     空白会被浏览器保留。其行为方式类似 HTML 中的 <pre> 标签。
    nowrap  文本不会换行，文本会在在同一行上继续，直到遇到 <br> 标签为止。
    pre-wrap    保留空白符序列，但是正常地进行换行。
    pre-line    合并空白符序列，但是保留换行符。

例：
<html>
<head>
<meta charset = "utf-8">
<title>CSS</title>
<style>
h1 {
  text-align: center;
}
p {
  color: red;
  font-size: 24pt;
  letter-spacing: 2px;
  line-height: 40pt;
  text-indent: 2em;
}
</style>
</head>
<body>
<h1>宜春学院简介</h1>
<p>宜春学院已成为集经济学、法学、教育学、文学、历史学、理学、工学、农学、医学、管理学等十大学科门类为一体的多学科性高等学府，成为江西省学科门类齐全的综合性本科大学。</p>
</body>
</html>


5、CSS3 文本阴影
text-shadow: 阴影向右偏移量，阴影向下偏移量，阴影模糊值，阴影颜色
<html>
<head>
<title>CSS</title>
<style>
div {
  text-align: center;
  color: #39f;
  font-size: 64pt;
  font-family: 隶书;
  text-shadow: 5px 5px 5px #666
}
p {
  color: red;
  text-align: center;
  background: #9cc;
  font-size: 72pt;
  font-family: 楷体_GB2312;
  text-shadow: 2px 1px 2px black,-2px -1px #ff9;
}
</style>
</head>
<body>

<--!<div> 是一个块级元素。这意味着它的内容自动地开始一个新行。-->
<div>宜春学院</div>
<p>HTML5网页设计</p>
</body>
</html>


6、CSS3 自动换行
在 CSS3 中，word-wrap 属性允许您允许文本强制文本进行换行 - 即使这意味着会对单词进行拆分
例如：
<html>
<head>
<style> 
p {
  width:11em; 
  border:1px solid #000000;
  word-wrap:break-word;
}
</style>
</head>
<body>
<p class="test">This paragraph contains a very long word: thisisaveryveryveryveryveryverylongword. The long word will break and wrap to the next line.</p>
</body>
</html>


7、CSS 背景
CSS 背景属性
属性	描述
background	简写属性，作用是将背景属性设置在一个声明中。
background-attachment	背景图像是否固定或者随着页面的其余部分滚动。
background-color	设置元素的背景颜色。
background-image	把图像设置为背景。
background-position	设置背景图像的起始位置。
background-repeat	设置背景图像是否及如何重复。

1) background-color 属性，背景色
如：p { background-color: #cff; padding: 5px; }

2) background-image 属性，背景图像
如：body { background-image: url(image/背景1.jpg); }

3）background-repeat 属性，背景重复
background-repeat 设置是否及如何重复背景图像。值如下
  repeat	默认。背景图像将在垂直方向和水平方向重复。
  repeat-x	背景图像将在水平方向重复。
  repeat-y	背景图像将在垂直方向重复。
  no-repeat	背景图像将仅显示一次。

4) background-position 属性，背景定位
有以下三种值
top left、top center、top right、center left、center center、center right、bottom left、bottom center、bottom right
x% y%		第一个值是水平位置，第二个值是垂直位置。
xpos ypos	第一个值是水平位置，第二个值是垂直位置。

5) background-attachment 属性，背景关联
background-attachment 设置背景图像是否固定或者随着页面的其余部分滚动。值如下
  fixed		当页面的其余部分滚动时，背景图像不会移动。
  scroll	默认值。背景图像会随着页面其余部分的滚动而移动。
  
6) background 简写属性
在一个声明中设置所有的背景属性。
如：background: url(image/背景1.jpg) no-repeat fixed center;

例：
<html>
<head>
<title>CSS</title>
<style>
body {
  background-color: #cff;
  background-image: url(image/背景1.jpg);
  background-repeat: no-repeat;
  background-attachment: fixed;
  background-position: center;
  background-size: 800px 600px;
/*    background: #cff url(image/背景1.jpg) no-repeat fixed center;   */
}
h1 {
  text-align: center;
}
p {
  font-size: 24pt;
}
</style>
</head>
<body>
<h1>宜春学院</h1>
<p>宜春学院座落于风景秀丽的宜春市城西文教新区，占地面积达1250多亩。新校园依山傍水，风光旖旎；南邻浙赣线，西接320国道；交通便利，地理位置优越，是莘莘学子读书研学的理想之地。学校的前身为创办于1958年的宜春大学。四十多年来，宜春学院人励精图治、奋发图强，使学校的建设和发展不断迈上新台阶。目前，宜春学院已成为集经济学、法学、教育学、文学、历史学、理学、工学、农学、医学、管理学等十大学科门类为一体的多学科性高等学府，成为江西省学科门类齐全的综合性本科大学。</p>
</body>
</html>

8、CSS3 背景

1) CSS3 多重背景图片
CSS3允许设置多个背景图像。
如：background-image: url(image/背景1.jpg), url(image/chrome.png);

2) background-size 属性，背景图片的尺寸
在 CSS3 之前，背景图片的尺寸是由图片的实际尺寸决定的。在 CSS3 中，可以规定背景图片的尺寸，这就允许我们在不同的环境中重复使用背景图片。
background-size 属性的值有以下几种
  宽度和高度的具体值
  宽度和高度的百分比
  contain：把图像图像扩展至最大尺寸，以使其宽度和高度完全适应内容区域。
  cover：把背景图像扩展至足够大，以使背景图像完全覆盖背景区域。
如：background-size: 800px 600px;
  
3) background-origin 属性
background-origin 属性规定背景图片的定位区域。背景图片可以放置于 content-box、padding-box 或 border-box 区域。
有以下三个值
padding-box	背景图像相对于内边距框来定位。
border-box	背景图像相对于边框盒来定位。
content-box	背景图像相对于内容框来定位。

4)  background-clip 属性
background-clip 属性规定背景的绘制区域。
有以下三个值
border-box	背景被裁剪到边框盒。
padding-box	背景被裁剪到内边距框。
content-box	背景被裁剪到内容框。


9、CSS 基本选择器
1) 元素选择器
  最常见的 CSS 选择器是元素选择器。换句话说，文档的元素就是最基本的选择器。
如：
body { background-color: #cff;}
h1,h2 { text-align: center;}
p { font-size: 16pt; color: red;}

2) 类选择器
类选择器以一个点号显示
如：
.abc { color: blue; }
或
p.abc { font-size: 24pt; }

3) ID选择器
id 选择器可以为标有特定 id 的 HTML 元素指定特定的样式。
id 选择器以 "#" 来定义
如：
#xyz { color: #060; }

例：
<html>
<head>
<title>CSS</title>
<style>
body {
  background-color: #cff;
}
h1,h2 {
  text-align: center;
}
p {
  font-size: 16pt;
  color: red;
}
.abc {
  color: blue;
}
p.abc {
  font-size: 24pt;
}
#xyz {
  color: #060;
}
</style>
</head>
<body>
<h1>宜春学院</h1>
<h2 class="abc">HTML5网页设计</h2>
<p>这是第一段文字内容</p>
<p class="abc">这是第二段文字内容</p>
<p id="xyz">这是第三段文字内容</p>
</body>
</html>


10、属性选择器
可以为拥有指定属性的 HTML 元素设置样式，而不仅限于 class 和 id 属性。
如：
[title] { color:red; }
p[title] { font-size: 24pt; }
[title*="标题"] { color:green; }
例：
<html>
<head>
<title>CSS</title>
<style>
<--! 带有title属性的执行以下操作-->
[title] {
  color:red;
}
<--! 带有p title属性的执行操作，注意这次会覆盖上面的操作-->
p[title] {
  font-size: 24pt;
}
<--! 属性中包含“标题”两个字的执行以下操作 -->
[title*="标题"] {
  color:green;
}
</style>
</head>
<body>
<h1>宜春学院</h1>
<h2 title="这是标题">HTML5网页设计</h2>
<p>这是第一段文字内容</p>
<p title="这是这段文字的title属性">这是第二段文字内容</p>
<p title="这段文字不是标题">这是第三段文字内容</p>
</body>
</html>


11、其他几个选择器
1) 后代选择器
后代选择器可以选择作为某元素后代的元素。如：
p em { color: red; } 表示作为 p 元素的任何后代的 em 元素

2) 子元素选择器
子元素选择器只能选择作为某元素子元素的元素。如：
p > em { color: red; } 表示作为 p 元素的子元素的 em 元素

3) 相邻兄弟选择器
相邻兄弟选择器可选择紧接在另一元素后的元素，且二者有相同父元素。如：
h2 + p { color: green; } 表示选择紧接在 h2 元素后出现的段落，h2 和 p 元素拥有共同的父元素。

4) 兄弟选择器
如：h2 ~ p 表示h2后面的所有同级的p元素。

例：
<html>
<head>
<title>CSS</title>
<style>
p { font-size: 16pt; color: blue; }
p em { color: red; }
h2 + p { color: green; }
</style>
</head>
<body>
<h1>宜春学院</h1>
<h2>HTML5<em>网页设计</em></h2>
<p>这是<em>第一段</em>文字内容</p>
<p>这是第二段文字内容</p>
<p>这是第三段文字内容</p>
</body>
</html>

12、伪类
:first-child	向元素的第一个子元素添加样式。
:nth-child(n)  第n个元素
可以用even、odd来代替 2n、2n+1

例
<!DOCTYPE html>
<html>
<head>
<meta charset = "utf-8">
<title>我的第一个网页</title>
<style>
  body {
    background-color: #9ff;
  }
  p:first-letter {
    font-size: 200%;
  }
  p:hover {
    color: red;
  }
</style>
</head>
<body>
<h1><em>网页设计</em></h1>
<p>Hello，World！</p>
<p>网页设计 HTML 文档和 HTML 元素是通过HTML签进行标记的HTML 标签由开始标签和结束标签组成，开始标签是被括号包围的元素名，结束标签是被括号包围的斜杠和元素名，某些 HTML 元素没有结束标签。 </p>
</body>
</html>
-------

13、CSS 链接
链接的四种状态：
a:link - 普通的、未被访问的链接
a:visited - 用户已访问的链接
a:hover - 鼠标指针位于链接的上方
a:active - 链接被点击的时刻

当为链接的不同状态设置样式时，请按照以下次序规则：
a:hover 必须位于 a:link 和 a:visited 之后
a:active 必须位于 a:hover 之后

例
<html>
<head>
<style>
a:link { color: #f00; text-decoration: none; }
a:hover { color: #f0f; text-decoration: underline; }
a:visited { color: #0f0; }
a:active { color: #00f; }
</style>
</head>
<body>
<a href="http://www.w3school.com.cn" target="_blank">这是一个链接。</a>
</body>
</html>


14、无序列表
list-style-type 属性，用于修改列表项的标志类型 
对无序列表，值为：box、check、circle、diamond、disc、hyphen、square。
不过目前浏览器只支持circle、disc、square。

//去掉无序列表标志
list-style-type: none;

list-style-image 属性，可以对各标志使用一个图像
如：ul { list-style-image: url(image/flower.png); }

list-style-position 属性，设置在何处放置列表项标记。
有以下两个值
inside	列表项目标记放置在文本以内，且环绕文本根据标记对齐。
outside	默认值。保持标记位于文本的左侧。列表项目标记放置在文本以外，且环绕文本不根据标记对齐。

例
<!DOCTYPE HTML>
<html>
<head>
<meta charset="utf-8">
<title>CSS Sample</title>
<style>
  ul#list_1 {list-style-type:circle;}
  ul#list_2 {list-style-type:disc;}
  ul#list_3 {list-style-type:square;}
  ul#list_4 { list-style-image: url(image/flower.png); }
</style>
</head>
<body>
<ul id="list_1">
   <li>第一个列表项</li>
   <li>第二个列表项</li>
   <li>第三个列表项</li>
</ul>
<ul id="list_2">
   <li>第一个列表项</li>
   <li>第二个列表项</li>
   <li>第三个列表项</li>
</ul>
<ul id="list_3">
   <li>第一个列表项</li>
   <li>第二个列表项</li>
   <li>第三个列表项</li>
</ul>
<ul id="list_4">
   <li>第一个列表项</li>
   <li>第二个列表项</li>
   <li>第三个列表项</li>
</ul>
</body>
</html>


15、有序列表
对有序列表，list-style-type的值为：
lower-roman 小写罗马数字
upper-roman 大写罗马数字
upper-alpha 或 upper-latin 大写英文字母
lower-alpha 或 lower-latin 小写英文字母
lower-greek 小写希腊字母 
decimal 十进制数
decimal-leading-zero 十进制数，前面带0，如01、02、99
binary 二进制数
cjk-ideographic 中文数字一二三四
cjk-earthly-branch 子丑寅卯
cjk-heavenly-stem 甲乙丙丁
asterisks 一系列的*号

例
<!DOCTYPE HTML>
<html>
<head>
<meta charset="utf-8">
<title>CSS Sample</title>
<style>
  ol#list_1 {list-style-type:lower-roman;}
  ol#list_2 {list-style-type:upper-roman;}
  ol#list_3 {list-style-type:lower-alpha;}
  ol#list_4 {list-style-type:upper-alpha;}
  ol#list_5 {list-style-type:lower-greek;}
  ol#list_6 {list-style-type:decimal;}
  ol#list_7 {list-style-type:decimal-leading-zero;}
  ol#list_8 {list-style-type:cjk-ideographic;}
  ol#list_9 {list-style-type:cjk-earthly-branch;}
  ol#list_10 {list-style-type:cjk-heavenly-stem;}
  ol#list_11 {list-style-type:asterisks;}
</style>
</head>
<body>
<ol id="list_1">
   <li>第一个列表项</li>
   <li>第二个列表项</li>
</ol>
<ol id="list_2">
   <li>第一个列表项</li>
   <li>第二个列表项</li>
</ol>
<ol id="list_3">
   <li>第一个列表项</li>
   <li>第二个列表项</li>
</ol>
<ol id="list_4">
   <li>第一个列表项</li>
   <li>第二个列表项</li>
</ol>
<ol id="list_5">
   <li>第一个列表项</li>
   <li>第二个列表项</li>
</ol>
<ol id="list_6">
   <li>第一个列表项</li>
   <li>第二个列表项</li>
</ol>
<ol id="list_7">
   <li>第一个列表项</li>
   <li>第二个列表项</li>
</ol>
<ol id="list_8">
   <li>第一个列表项</li>
   <li>第二个列表项</li>
</ol>
<ol id="list_9">
   <li>第一个列表项</li>
   <li>第二个列表项</li>
</ol>
<ol id="list_10">
   <li>第一个列表项</li>
   <li>第二个列表项</li>
</ol>
<ol id="list_11">
   <li>第一个列表项</li>
   <li>第二个列表项</li>
</ol>
</body>
</html>

16、表格
CSS 表格 属性
border-collapse	设置是否把表格边框合并为单一的边框。
border-spacing	设置分隔单元格边框的距离。
caption-side	设置表格标题的位置。
empty-cells	设置是否显示表格中的空单元格。
table-layout	设置显示单元、行和列的算法。

1) border-collapse	规定是否合并表格边框。
    separate	默认值。边框会被分开。不会忽略 border-spacing 和 empty-cells 属性。
    collapse	边框会合并为一个单一的边框。会忽略 border-spacing 和 empty-cells 属性。
2) border-spacing 规定相邻单元格边框之间的距离。
    如果定义一个数值，那么定义的是水平和垂直间距。
    如果定义两个数值，那么第一个设置水平间距，而第二个设置垂直间距。
3) caption-side	规定表格标题的位置。
    top		默认值。把表格标题定位在表格之上。
    bottom	把表格标题定位在表格之下。
4) empty-cells	规定是否显示表格中的空单元格上的边框和背景。
    hide	不在空单元格周围绘制边框。
    show	在空单元格周围绘制边框。默认。
5) table-layout	设置用于表格的布局算法。
    automatic	默认。列宽度由单元格内容设定。
    fixed	列宽由表格宽度和列宽度设定。

使用 border 属性设置表格边框。
通过 width 和 height 属性定义表格的宽度和高度。

text-align 属性设置水平对齐方式，比如左对齐、右对齐或者居中
vertical-align 属性设置垂直对齐方式，比如顶部对齐、底部对齐或居中对齐

为 td 和 th 元素设置 padding 属性，控制表格中内容与边框的距离

修改表格位置：
table{
  position: absolute;
  top: 100px;
  left: 20%;
}
修改caption：
table caption{
  font-size:30px;
}

17、CSS盒子模型
    CSS将网页中的每一个元素都看作是一个长方形的盒子。这个盒子包括外边距、边框、内边距和元素内容4项。

例：
<html>
<head>
<meta charset = "utf-8">
<title>CSS</title>
<style>
#foo { width: 400px; border: 1px solid #000; }
#bar {
  margin: 40px;
  padding: 50px;
  border: 20px solid #069;
  background-color: #cf9;
}
</style>
</head>
<body>
<div id="foo">
  <div id="bar">
    HTML5网页设计，第1章  网页设计概述，第2章  HTML语言基础，第3章  CSS样式表基础
  </div>
</div>
</body>
</html>


18、外边距属性 Margin
外边距指的是元素边框外的空白区域。
margin	在一个声明中设置所有外边距属性。
margin-bottom	设置元素的下外边距。
margin-left	设置元素的左外边距。
margin-right	设置元素的右外边距。
margin-top	设置元素的上外边距。

例：margin:10px 5px 15px 20px;
上外边距是 10px
右外边距是 5px
下外边距是 15px
左外边距是 20px

例：margin:10px 5px 15px;
上外边距是 10px
右外边距和左外边距是 5px
下外边距是 15px

例子：margin:10px 5px;
上外边距和下外边距是 10px
右外边距和左外边距是 5px

例子：margin:10px;
所有 4 个外边距都是 10px

将左右外边距都设置为auto，元素将左右居中。

外边距合并：外边距合并指的是，当两个垂直外边距相遇时，它们将形成一个外边距。合并后的外边距的高度等于两个发生合并的外边距的高度中的较大者。

19、内边距属性 padding 
内边距指的是元素边框与元素内容之间的空白区域。
padding	在一个声明中设置所有内边距属性。
padding-bottom	设置元素的下内边距。
padding-left	设置元素的左内边距。
padding-right	设置元素的右内边距。
padding-top	设置元素的上内边距。

例：padding: 10px 5px 15px 20px; 
上内边距是 10px
右内边距是 5px
下内边距是 15px
左内边距是 20px

例：padding:10px 5px 15px;
上内边距是 10px
右内边距和左内边距是 5px
下内边距是 15px

例：padding:10px 5px;
上内边距和下内边距是 10px
右内边距和左内边距是 5px

例：padding:10px;
所有 4 个内边距都是 10px

20、边框 border
元素的边框 (border) 是围绕元素内容和内边距的一条或多条线。

1) border-color 设置四条边框的颜色。

例子 1：border-color:red green blue pink;
上边框是红色
右边框是绿色
下边框是蓝色
左边框是粉色

例子 2：border-color:red green blue;
上边框是红色
右边框和左边框是绿色
下边框是蓝色

例子 3：border-color:dotted red green;
上边框和下边框是红色
右边框和左边框是绿色

例子 4：border-color:red;
所有 4 个边框都是红色

可设置边框颜色值为 transparent，创建有宽度的不可见边框。

2) border-width	设置四条边框的宽度。

3) border-style	设置四条边框的样式。

none	定义无边框。
dotted	定义点状边框。在大多数浏览器中呈现为实线。
dashed	定义虚线。在大多数浏览器中呈现为实线。
solid	定义实线。
double	定义双线。双线的宽度等于 border-width 的值。
groove	定义 3D 凹槽边框。其效果取决于 border-color 的值。
ridge	定义 3D 垄状边框。其效果取决于 border-color 的值。
inset	定义 3D inset 边框。其效果取决于 border-color 的值。
outset	定义 3D outset 边框。其效果取决于 border-color 的值。

4) border 在一个声明中设置所有的边框属性。
可以按顺序设置如下属性：
border-width
border-style
border-color
例：border: 20px solid #066;


21、轮廓 outline
轮廓（outline）是绘制于元素周围的一条线，位于边框边缘的外围，可起到突出元素的作用。
CSS outline 属性规定元素轮廓的样式、颜色和宽度。

CSS 轮廓属性
outline	在一个声明中设置所有的轮廓属性。
outline-color	设置轮廓的颜色。
outline-style	设置轮廓的样式。
outline-width	设置轮廓的宽度。

例：outline:#f00 solid 5px;

<html>
<head>
<meta charset = "utf-8">
<title>CSS</title>
<style>
  #bar {
    margin: 40px;
    padding: 50px;
    border: 20px solid #069;
    outline:#f00 solid 5px;
  }
</style>
</head>
<body>
  <div id="bar">
    CSS轮廓
  </div>
</body>
</html>

22、CSS3 边框阴影
box-shadow: 阴影向右偏移量，阴影向下偏移量，阴影模糊值，阴影颜色
box-shadow: 5px 5px 5px #666;

例：
<html>
<head>
<title>CSS</title>
<style>
body { background: #cff; }
img {
  box-shadow: 7px 7px 10px black;
}
</style>
</head>
<body>
<div id="foo">
 <img src="images/宜春学院.jpg">
</div>
</body>
</html>

多重阴影
可以定义多个阴影叠加在一起。
例：
img {  box-shadow: 0px 0px 30px red inset, 8px 8px 10px #333; }
<img id="1" src="image/chrome.png">


23、CSS3 圆角边框
一个Box有4个角，分别用 border-top-right-radius、border-bottom-right-radius、border-bottom-left-radius、border-top-left-radius 来定义。每个角由2个值来定义一个椭圆。
也可以用 border-radius 一起定义4个圆角。格式为：
border-radius: 左上 右上 右下 左下 /  左上 右上 右下 左下
如果省略了左下，那么就等同于右上；如果省略了右下，那么就等同于左上；如果也省略了右上，那么也等同于左上。

例：
<html>
<head>
<title>CSS</title>
<style>
img {
  box-shadow: 7px 7px 10px black;
  border-radius: 30px / 20px;
}
</style>
</head>
<body>
<div id="foo">
  <img id="2" src="image/宜春学院.jpg">
</div>
</body>
</html>


24、CSS3 边框图片
通过 CSS3 的 border-image 属性，您可以使用图片来创建边框
border-image 属性的值有
border-image-source	用在边框的图片的路径。	
border-image-slice	图片边框向内偏移。	
border-image-width	图片边框的宽度。	
border-image-outset	边框图像区域超出边框的量。	
border-image-repeat	图像边框是否应平铺(repeated)、铺满(rounded)或拉伸(stretched)。

例：
<!DOCTYPE html>
<html>
<head>
<title>CSS</title>
<style>
div {
  border: 15px solid transparent;
  width: 300px;
  padding:20px;
}
#round {
  border-image:url(images/border.png) 26 26 round;
}
#stretch {
  border-image:url(images/border.png) 30 30 stretch;
}
</style>
</head>
<body>
  <div id="round">在这里，图片铺满整个边框。</div>
  <br>
  <div id="stretch">在这里，图片被拉伸以填充该区域。</div>
</body>
</html>


25、CSS3 2D转换
  使用 transform 属性，实现图形的转换，包括旋转、平移、缩放、倾斜。
  平移：translate(x, y)、translateX(x)、translateY(y)
  旋转：rotate(angle)
  缩放：scale(n1, n2)、scaleX(n)、scaleY(n)
  倾斜：skew(angle1,angle2)、skewX(angle)、skewY(angle)
  
1) translate() 方法
通过 translate() 方法，元素从其当前位置移动，根据给定的 left（x 坐标） 和 top（y 坐标） 位置参数

2) rotate() 方法
通过 rotate() 方法，元素顺时针旋转给定的角度。允许负值，元素将逆时针旋转

3) scale() 方法
通过 scale() 方法，元素的尺寸会增加或减少，根据给定的宽度（X 轴）和高度（Y 轴）参数

4) skew() 方法
通过 skew() 方法，元素翻转给定的角度，根据给定的水平线（X 轴）和垂直线（Y 轴）参数

5) matrix() 方法
matrix() 方法把所有 2D 转换方法组合在一起。
matrix() 方法需要六个参数，包含数学函数，允许您：旋转、缩放、移动以及倾斜元素

6) CSS3 transform-origin 属性
语法：transform-origin: x-axis y-axis z-axis;

例
<!DOCTYPE html>
<html>
<head>
<title>CSS</title>
<style>
  div {
    width: 300px;
    height: 60px;
  }
  #div1{ 
    background: #f00;
    transform: translateX(50px) skewX(-20deg); 
  }
  #div2{ 
    background: #0f0;
    transform-origin: 100% 0%;
    transform: translate(150px,20px) rotate(-15deg) scale(1.5); 
  }
  #div3{ 
    background: #0cf;
    transform: matrix(0.866,0.5,-0.5,0.866,0,0);
  }
</style>
</head>
<body>
<div id="div1">Hello World1</div><br>
<div id="div2">Hello World2</div><br>
<div id="div3">Hello World3</div><br>
</body>
</html>


26、CSS3 3D转换
CSS3 允许您使用 3D 转换来对元素进行格式化。

1) rotateX() 方法
通过 rotateX() 方法，元素围绕其 X 轴以给定的度数进行旋转。

2) rotateY() 方法
通过 rotateY() 方法，元素围绕其 Y 轴以给定的度数进行旋转。

3) rotateZ() 方法
通过 rotateZ() 方法，元素围绕其 Z 轴以给定的度数进行旋转。

4) CSS3 perspective 属性
perspective 属性定义 3D 元素距视图的距离，以像素计。该属性允许您改变 3D 元素查看 3D 元素的视图。
当为元素定义 perspective 属性时，其子元素会获得透视效果，而不是元素本身

目前浏览器都不支持 perspective 属性。
Chrome 和 Safari 支持替代的 -webkit-perspective 属性。

例
<html>
<head>
<title>CSS</title>
<style>
  #div1{ 
    height: 150px;
    width: 150px;
    margin: 50px;
    border: 1px solid black;
    perspective:150;
    -webkit-perspective:150; /* Safari and Chrome */
  }
  #div2{ 
    padding:30px;
    border: 1px solid black;
    background-color: yellow;
    transform: rotateX(45deg);
}
</style>
</head>
<body>
<div id="div1">
  <div id="div2">Hello</div>
</div>
</body>
</html>

27、CSS3 线性渐变

语法
background: linear-gradient(direction, color-stop1, color-stop2, ...);
方向可以是：to bottom、to top、to right、to left、to bottom right等等，还可以是一个角度

重复的线性渐变
repeating-linear-gradient() 函数用于重复线性渐变

例
<html>
<head>
<style>
#div1{ 
  width: 300px; height: 100px;
  background: linear-gradient(red, #ff0, green);
}
#div2{ 
  width: 400px; height: 100px;
  background: linear-gradient(to right, red, #ff0 60%, rgba(0,255,0,0.8));
}
#div3{ 
  width: 400px; height: 100px;
  background: linear-gradient(to bottom right, red, #ff0, green);
}
#div4{ 
  width: 300px; height: 100px;
  background: linear-gradient(45deg, red, #ff0, green);
}

</style>
</head>
<body>
<div id="div1"></div><br>
<div id="div2"></div><br>
<div id="div3"></div><br>
<div id="div4"></div><br>
</body>
</html>


28、CSS3 径向渐变

为了创建一个径向渐变，你也必须至少定义两种颜色结点。颜色结点即你想要呈现平稳过渡的颜色。同时，你也可以指定渐变的中心、形状（圆形或椭圆形）、大小。默认情况下，渐变的中心是 center（表示在中心点），渐变的形状是 ellipse（表示椭圆形），渐变的大小是 farthest-corner（表示到最远的角落）。

语法
background: radial-gradient(center, shape size, start-color, ..., last-color);

shape 参数定义了形状。它可以是值 circle 或 ellipse。其中，circle 表示圆形，ellipse 表示椭圆形。默认值是 ellipse。

size 参数定义了渐变的大小。它可以是以下四个值：
- closest-side：指定径向渐变的半径长度为从圆心到离圆心最近的边；
- farthest-side：指定径向渐变的半径长度为从圆心到离圆心最远的边；
- closest-corner：指定径向渐变的半径长度为从圆心到离圆心最近的角；
- farthest-corner：指定径向渐变的半径长度为从圆心到离圆心最远的角；

重复的径向渐变
repeating-radial-gradient() 函数用于重复径向渐变
例：
div { background: repeating-radial-gradient(red, yellow 10%, green 20%); }

例
<html>
<head>
<style>
#div1{ 
  width: 300px; height: 150px;
  background: radial-gradient(red, #ff0, green);
}
#div2{ 
  width: 200px; height: 200px;
  background: radial-gradient(circle, red, #ff0, green);
}
#div3{ 
  width: 150px; height: 150px;
  border-radius: 75px;
  background: -webkit-radial-gradient(30% 30%, #ff0, red);
}
</style>
</head>
<body>
<div id="div1"></div><br>
<div id="div2"></div><br>
<div id="div3"></div><br>
</body>
</html>


29、CSS3 过渡

通过 CSS3 的 transition，我们可以在当元素从一种样式变换为另一种样式时为元素添加效果。

过渡属性
transition		简写属性，用于在一个属性中设置四个过渡属性。
transition-property	规定应用过渡的 CSS 属性的名称。
transition-duration	定义过渡效果花费的时间。默认是 0。
transition-timing-function	规定过渡效果的时间曲线。默认是 "ease"。
transition-delay	规定过渡效果何时开始。默认是 0。

其中 transition-timing-function 属性
linear		规定以相同速度开始至结束的过渡效果（等于 cubic-bezier(0,0,1,1)）。
ease		规定慢速开始，然后变快，然后慢速结束的过渡效果（cubic-bezier(0.25,0.1,0.25,1)）。
ease-in		规定以慢速开始的过渡效果（等于 cubic-bezier(0.42,0,1,1)）。
ease-out	规定以慢速结束的过渡效果（等于 cubic-bezier(0,0,0.58,1)）。
ease-in-out	规定以慢速开始和结束的过渡效果（等于 cubic-bezier(0.42,0,0.58,1)）。
cubic-bezier(n,n,n,n)	在 cubic-bezier 函数中定义自己的值。可能的值是 0 至 1 之间的数值。

例
<!DOCTYPE html>
<html>
<head>
<meta charset = "utf-8">
<style>
div {
  width: 100px;
  height: 100px;
  background: red;
  transition: background 3s linear, width 2s linear, height 2s linear;
}
div:hover{
  width: 300px;
  height: 200px;
  background: #ff0;
}
</style>
</head>
<body>
  <div></div>
</body>
</html>

例：红方块旋转180°
div {
  width: 100px;
  height: 100px;
  background: red;
  transition: transform 2s;
}
div:hover{
  transform: rotate(180deg);
}


30、CSS3 动画

@keyframes 规则用于创建动画。在 @keyframes 中规定某项 CSS 样式，就能创建由当前样式逐渐改为新样式的动画效果。

    使用 @keyframes 可以创建动画。在动画过程中，您可以更改CSS样式的设定多次。指定的变化时发生时使用％，或关键字“from”和“to”，这是和0％到100％相同。0％是开头动画，100％是当动画完成。
如
  @keyframes mycolor {
    0% { background-color: red; }
    30% { background-color: darkblue; }
    50% { background-color: yellow; }
    70% { background-color: darkblue; }
    100% { background-color: red; }
  }
1) animation-name 属性指定了一个 @keyframes 动画。
2) animation-duration 属性定义动画完成一个周期需要多少秒或毫秒。
3) animation-timing-function 指定动画将如何完成一个周期
4) animation-delay 属性定义动画什么时候开始。
5) animation-iteration-count 属性定义动画应该播放多少次。
    其值为：n（一个数字，指定播放多少次）、infinite（指定播放无限次）
6) animation-direction 属性定义动画是否应该播放完后逆向交替循环。值对设置了多次播放的动画有效。
    其值为：normal（默认值，动画正常）、alternate（动画交替循环逆向运动）
7) animation--play-state 属性指定动画是否正在运行或已暂停状态。
    其值为：paused（暂停动画）、running（运行动画）
8) animation 属性有6个缩写属性：animation-name、animation-duration、animation-timing-function、animation-delay、animation-iteration-count和animation-direction。


例1：播放两次时长为5s的变色（红->黄->绿->h红）动画，结束。
<!DOCTYPE html>
<html>
<head>
<meta charset = "utf-8">
<style>
div { 
  width: 200px;
  height: 200px;
  background: red;
}
@keyframes mycolor {
  0% { background-color: red; }
  30% { background-color: yellow; }
  60% { background-color: green; }
  100% { background-color: red; }
}
div:hover {
  animation-name: mycolor;
  animation-duration: 5s;
  animation-timing-function: linear;
  animation-iteration-count: 2;
}
</style>
</head>
<body>
 <div></div>
</body>
</html>

例2：播放一次时长为5s的方块变色移动（红->黄->蓝->绿->红）动画，结束。
<!DOCTYPE html>
<html>
<head>
<style> 
div {
  width: 100px;
  height: 100px;
  background: red;
  position: relative;
  animation: myfirst 5s;
}

@keyframes myfirst {
  0%   {background:red; left:0px; top:0px;}
  25%  {background:yellow; left:200px; top:0px;}
  50%  {background:blue; left:200px; top:200px;}
  75%  {background:green; left:0px; top:200px;}
  100% {background:red; left:0px; top:0px;}
}
</style>
</head>
<body>
  <div></div>
</body>
</html>


31、CSS3 滤镜
grayscale 灰度
    filter: grayscale(0.5);
    参数值在0至1之间。
例：彩色黑白的过渡
    img { transition: filter 2s; }
    img:hover {  filter: grayscale(1); }
    
brightness 亮度
    filter: brightness(5);
contrast 对比度
    filter: contrast(1.5);
saturate 饱和度
    filter: saturate(1.5);
hue-rotate 色相旋转
    filter: hue-rotate(60deg);
opacity 透明度
    filter: opacity(0.4);
blur 模糊
    filter: blur(2px);
invert 反转颜色
    filter: invert(1);
sepia 棕褐色
    filter: sepia(1);
    棕褐色一般用于照片，显示像旧照片
drop-shadow 阴影
    filter: drop-shadow(5px 5px 8px #333);

例
<!DOCTYPE html>
<html>
<head>
<meta charset = "utf-8">
<title>无标题文档</title>
<style>
body { text-align: center; font-size: 9pt;}
div { float: left; }
@keyframes adjustHue {
    0% { filter: hue-rotate(20deg); }
    30% { filter: hue-rotate(50deg); }
    70% { filter: hue-rotate(70deg); }
    100% { filter: hue-rotate(90deg); }
}
img { width: 190px; height: 190px; }
#img2 { filter: grayscale(0.7); }
#img3 { filter: saturate(1.5); }
#img4 { filter: brightness(4); }
#img5 { filter: contrast(1.5); }
#img6 { filter: hue-rotate(60deg); }
#img7 { filter: opacity(0.6); }
#img8 { filter: sepia(1); }
#img9 { filter: invert(1); }
#img10 { filter: blur(2px); }
#img11 { filter: drop-shadow(5px 5px 8px #333); }
#img12 { animation: adjustHue 1s alternate infinite; }
#img13 { transition: filter 2s; }
#img13:hover { filter: grayscale(1); }
</style>
</head>
<body>
  <h3>CSS3 滤镜演示，请使用 Google Chrome 19 以上的版本观看</h3>
  <div><img id="img1" src="images/chrome.png"><br>原图</div>
  <div><img id="img2" src="images/chrome.png"><br>灰度 grayscale(0.7)</div>
  <div><img id="img3" src="images/chrome.png"><br>饱和度 saturate(1.5)</div>
  <div><img id="img4" src="images/chrome.png"><br>亮度 brightness(4)</div>
  <div><img id="img5" src="images/chrome.png"><br>对比度 contrast(1.5)</div>
  <div><img id="img6" src="images/chrome.png"><br>色相旋转 hue-rotate(60deg)</div>
  <div><img id="img7" src="images/chrome.png"><br>透明度 opacity(0.6)</div>
  <div><img id="img8" src="images/chrome.png"><br>棕褐色 sepia(1)</div>
  <div><img id="img9" src="images/chrome.png"><br>反转颜色 invert(1)</div>
  <div><img id="img10" src="images/chrome.png"><br>模糊 blur(2px)</div>
  <div><img id="img11" src="images/chrome.png"><br>阴影 drop-shadow(5px 5px 8px #333)</div>
  <div><img id="img12" src="images/chrome.png"><br>色相旋转动画</div>
  <div><img id="img13" src="images/chrome.png"><br>彩色黑白过渡演示</div>
</body>
</html>

32、CSS3 多列
通过 CSS3，您能够创建多个列来对文本进行布局 - 就像报纸那样！

column-count	规定元素应该被分隔的列数。
column-fill	规定如何填充列。
column-gap	规定列之间的间隔。
column-rule	设置所有 column-rule-* 属性的简写属性。
column-rule-color	规定列之间规则的颜色。
column-rule-style	规定列之间规则的样式。
column-rule-width	规定列之间规则的宽度。
column-span	规定元素应该横跨的列数。
column-width	规定列的宽度。
columns	规定设置 column-width 和 column-count 的简写属性。

例：
<html>
<head>
<style>
div { 
  width: 500px; color: #009;
  margin: auto;
  border: 1px solid #66c;
  /*-webkit-代表safari、chrome私有属性*/
  -webkit-columns: 2 20px;
  -webkit-column-rule: 1px solid #ccc;
  /* -moz-代表firefox浏览器私有属性 */
  -moz-column-count: 2;
  -moz-column-gap: 20px;
  -moz-column-rule: 1px solid #ccc;
  columns: 2;
  column-gap: 20px; 
  column-rule: 1px solid #ccc;
}
</style>
</head>
<body>
<div>
学习小组任务<br>
1、做一个网页，只需一页，内容任意。基本要求：要有布局，一个网页分成若干块，每一块里面都要基本放满内容。友情提示：如果中间一块没很合适的内容放，建议放一个课程表。<br>
2、翻墙访问Facebook、YouTube、twitter、Google+，在Facebook和Google+中互相加一下好友，在我的Google文档中签名。<br>
3、在网页上显示一行欢迎词，格式为：“晚上好！今天是2012年5月8日，星期二，现在的时间是20:05。欢迎访问本网站。”<br>
4、到 http://sae.sina.com.cn/ 注册一个号，建立一个主页，把网页练习传上去。
</div>
</body>
</html>


33、CSS3 用户界面

新的用户界面属性
appearance	允许您将元素设置为标准用户界面元素的外观
box-sizing	允许您以确切的方式定义适应某个区域的具体内容
icon		为创作者提供使用图标化等价物来设置元素样式的能力
nav-index	设置元素的 tab 键控制次序
outline-offset	对轮廓进行偏移，并在超出边框边缘的位置绘制轮廓
resize		规定是否可由用户对元素的尺寸进行调整

1) appearance 属性
appearance 属性允许您使元素看上去像标准的用户界面元素。其值有：
    normal	将元素呈现为常规元素。
    icon	将元素呈现为图标（小图片）。
    window	将元素呈现为视口。
    button	将元素呈现为按钮。
    menu	将元素呈现为一套供用户选择的选项。
    field	将元素呈现为输入字段。

例：设置div元素看起来像一个按钮
<html>
<head>
<style>
div {
  width: 100px; 
  height: 30px;
  -webkit-box-align: center;
  -webkit-box-pack: center;
  display: -moz-box;
  display: -webkit-box;
  appearance: button;
  -webkit-appearance: button; /* Safari 和 Chrome */
  -moz-appearance: button; /* Firefox */
}
</style>
</head>
<body>
  <div>确定</div>
</body>
</html>

所有主流浏览器都不支持 appearance 属性。
Firefox 支持替代的 -moz-appearance 属性。
Safari 和 Chrome 支持替代的 -webkit-appearance 属性。


2) resize
    resize 属性指定一个元素是否是由用户调整大小的。值有：
    none：	用户不能调整元素大小
    both：	用户可以调整元素的高度和宽度
    horizontal：用户可以调整元素的宽度
    vertical：	用户可以调整元素的高度
    要使用 resize 属性，需要使用 overflow: auto;

例
<!DOCTYPE html>
<html>
<head>
<style> 
div {
  border: 1px solid;
  padding: 10px;
  width: 300px;
  resize: both;
  overflow: auto;
}
</style>
</head>
<body>
<div>resize 属性规定是否可由用户调整元素尺寸。</div>
</body>
</html>


3) outline-offset 属性

<!DOCTYPE html>
<html>
<head>
<style> 
div {
  margin: 20px;
  width: 150px; 
  padding: 10px;
  height: 70px;
  border: 2px solid black;
  outline: 2px solid red;
  outline-offset:15px;
} 
</style>
</head>
<body>
<div>这个 div 在边框边缘之外 15 像素处有一个轮廓。</div>
</body>
</html>


34、溢出与裁剪
  overflow 属性指定当一个块级元素的内容溢出了元素的BOX时是否裁剪。
  overflow 属性的值为：visible（不裁剪）、hidden（隐藏）、scroll（出现滚动条）、auto（需要时出现滚动条）
  overflow-x 属性控制水平方向的溢出，属性值同 overflow 。
  overflow-y 属性控制垂直方向的溢出，属性值同 overflow 。
  text-overflow 属性指定当文本溢出包含它的元素，应该发生什么。属性值为：clip（剪辑文本）、ellipsis（呈现省略号("...")代表剪切文本）、string（呈现给定字符串来表示剪切文本）

例：
<!DOCTYPE html> 
<html> 
<head> 
<style> 
div {
  width: 200px;
  background: #ff9;
  white-space: nowrap; 
  overflow: hidden; 
}
#text1 { text-overflow: clip; }
#text2 { text-overflow: ellipsis; }
div:hover { overflow: visible; }
</style>
</head>
<body>
<div id="text1">这是一条很长很长的长文本，长到此处放不下。</div><br>
<div id="text2">这是另一条很长很长的长文本，此处完全放不下。</div>
</body>
</html>


35、CSS 尺寸属性
height		设置元素高度。
max-height	设置元素的最大高度。
max-width	设置元素的最大宽度。
min-height	设置元素的最小高度。
min-width	设置元素的最小宽度。
width		设置元素的宽度。


36、盒子的居中属性
  水平居中属性：-webkit-box-pack、-moz-box-pack
  垂直居中属性： -webkit-box-align、-moz-box-align
      值为：start、end、center、baseline、stretch
使用这2个属性时需要加上：display: -moz-box; 或 display: -webkit-box;

例
<!DOCTYPE html>
<html>
<head>
<style> 
div {
  width: 350px;
  height: 100px;
  border: 1px solid black;
    
  /* Firefox */
  display: -moz-box;
  -moz-box-pack: center;
  -moz-box-align: center;

  /* Safari, Chrome, and Opera */
  display: -webkit-box;
  -webkit-box-pack: center;
  -webkit-box-align: center;

  /* W3C */
  display: box;
  box-pack: center;
  box-align: center;
}
</style>
</head>
<body>
<div>
<p>我是居中对齐的。</p>
</div>
</body>
</html>


37、CSS3 opacity 属性
Opacity 属性设置一个元素的透明度。

例
<!DOCTYPE html>
<html>
<head>
<style> 
div {
  background-color: yellow;
  opacity: 0.6;
}
</style>
</head>
<body>
<div>本元素的不透明度是 0.6。文本和背景色都受到不透明级别的影响。</div>
</body>
</html>


38、CSS 定位 position

CSS 定位属性
position	把元素放置到一个静态的、相对的、绝对的、或固定的位置中。
top		定义了一个定位元素的上外边距边界与其包含块上边界之间的偏移。
right		定义了定位元素右外边距边界与其包含块右边界之间的偏移。
bottom		定义了定位元素下外边距边界与其包含块下边界之间的偏移。
left		定义了定位元素左外边距边界与其包含块左边界之间的偏移。

通过使用 position 属性，我们可以选择 4 种不同类型的定位。
position 属性值：
    static：元素框正常生成。块级元素生成一个矩形框，作为文档流的一部分，行内元素则会创建一个或多个行框，置于其父元素中。
    relative：元素框偏移某个距离。元素仍保持其未定位前的形状，它原本所占的空间仍保留。
    absolute：元素框从文档流完全删除，并相对于其包含块定位。包含块可能是文档中的另一个元素或者是初始包含块。元素原先在正常文档流中所占的空间会关闭，就好像元素原来不存在一样。元素定位后生成一个块级框，而不论原来它在正常流中生成何种类型的框。
    fixed：元素框的表现类似于将 position 设置为 absolute，不过其包含块是视窗本身。

例
<html>
<head>
<style>
h2.pos_abs {
  position: absolute;
  left: 100px;
  top: 150px
}
</style>
</head>
<body>
<h2 class="pos_abs">这是带有绝对定位的标题</h2>
<p>通过绝对定位，元素可以放置到页面上的任何位置。下面的标题距离页面左侧 100px，距离页面顶部 150px。</p>
</body>
</html>


39、剪裁 clip
clip 属性剪裁绝对定位元素。
这个属性用于定义一个剪裁矩形。对于一个绝对定义元素，在这个矩形内的内容才可见。出了这个剪裁区域的内容会根据 overflow 的值来处理。剪裁区域可能比元素的内容区大，也可能比内容区小。

clip: rect (top, right, bottom, left)

例
<html>
<head>
<style>
img {
  position:absolute;
  clip: rect(200px 600px 500px 100px)
}
</style>
</head>
<body>
<img src="images/宜春学院1.jpg">
</body>
</html>


40、元素的垂直对齐 vertical-align

vertical-align 属性，设置元素的垂直对齐方式

值为
baseline	默认。元素放置在父元素的基线上。
sub		垂直对齐文本的下标。
super		垂直对齐文本的上标
top		把元素的顶端与行中最高元素的顶端对齐
text-top	把元素的顶端与父元素字体的顶端对齐
middle		把此元素放置在父元素的中部。
bottom		把元素的顶端与行中最低的元素的顶端对齐。
text-bottom	把元素的底端与父元素字体的底端对齐。
length	 	
%		使用 "line-height" 属性的百分比值来排列此元素。允许使用负值。


41、元素的堆叠顺序 z-index
z-index 属性设置元素的堆叠顺序。拥有更高堆叠顺序的元素总是会处于堆叠顺序较低的元素的前面。
Z-index 仅能在定位元素上奏效（例如 position:absolute;）

例
<html>
<head>
<style>
img {
  position:absolute;
  left:0px;
  top:0px;
  z-index:-1;
}
</style>
</head>
<body>
<h1>This is a heading</h1>
<img src="images/chrome.png" />
<p>由于图像的 z-index 是 -1，因此它在文本的后面出现。</p>
</body>
</html>


42、CSS 浮动，float 属性
    float 属性定义元素在哪个方向浮动。以往这个属性总应用于图像，使文本围绕在图像周围，不过在 CSS 中，任何元素都可以浮动。浮动元素会生成一个块级框，而不论它本身是何种元素。

float 属性的值
left	元素向左浮动。
right	元素向右浮动。
none	默认值。元素不浮动，并会显示在其在文本中出现的位置。
clear   清除浮动属性
诸如：
clear:left; //清除左浮动
clear:right; //清除右浮动
clear:both; //清除左右两边浮动

<html>
<head>
<meta charset = "utf-8">
<style>
  img {
    float: right;
  }
</style>
</head>
<body>
<img src="images/chrome.png">
<p>float 属性定义元素在哪个方向浮动。以往这个属性总应用于图像，使文本围绕在图像周围，不过在 CSS 中，任何元素都可以浮动。浮动元素会生成一个块级框，而不论它本身是何种元素。</p>
<p>因为浮动元素脱离了文档流，所以包围图片和文本的 div 不占据空间。如何让包围元素在视觉上包围浮动元素呢？需要在这个元素中的某个地方应用 clear</p>
<p>选择对布局中的所有东西进行浮动，然后使用适当的有意义的元素（常常是站点的页脚）对这些浮动进行清理。这有助于减少或消除不必要的标记。
  事实上，W3School 站点上的所有页面都采用了这种技术，如果您打开我们使用 CSS 文件，您会看到我们对页脚的 div 进行了清理，而页脚上面的三个 div 都向左浮动。</p>
</body>
</html>


43、display属性

none	此元素不会被显示。
block	此元素将显示为块级元素，此元素前后会带有换行符。
inline	默认。此元素会被显示为内联元素，元素前后没有换行符。
inline-block	行内块元素。（CSS2.1 新增的值）
list-item	此元素会作为列表显示。
run-in	此元素会根据上下文作为块级元素或内联元素显示。
table	此元素会作为块级表格来显示（类似 <table>），表格前后带有换行符。
inline-table	此元素会作为内联表格来显示（类似 <table>），表格前后没有换行符。
table-row-group	此元素会作为一个或多个行的分组来显示（类似 <tbody>）。
table-header-group	此元素会作为一个或多个行的分组来显示（类似 <thead>）。
table-footer-group	此元素会作为一个或多个行的分组来显示（类似 <tfoot>）。
table-row	此元素会作为一个表格行显示（类似 <tr>）。
table-column-group	此元素会作为一个或多个列的分组来显示（类似 <colgroup>）。
table-column	此元素会作为一个单元格列显示（类似 <col>）
table-cell	此元素会作为一个表格单元格显示（类似 <td> 和 <th>）
table-caption	此元素会作为一个表格标题显示（类似 <caption>）

例、行元素转为块级元素
<html>
<head>
<style>
  span {
    display: block;
    width: 500px;
    height: 100px;
    background-color: #9ff;
    margin: auto;
    text-align: center;
  }
</style>
</head>
<body>
<span>本例演示如何把元素显示为块级元素</span>
</body>
</html>


